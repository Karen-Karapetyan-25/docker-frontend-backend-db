name: build-scan-push-provision

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build_and_provision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v2

    - name: Compute image tags
      id: vars
      run: |
        SHA="${GITHUB_SHA::7}"
        echo "front=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/frontend:${SHA}" >> "$GITHUB_OUTPUT"
        echo "back=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/backend:${SHA}"  >> "$GITHUB_OUTPUT"

    - name: Build frontend
      run: docker build -t ${{ steps.vars.outputs.front }} ./frontend

    - name: Build backend
      run: docker build -t ${{ steps.vars.outputs.back }} ./backend

    - name: Trivy scan (frontend)
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref: ${{ steps.vars.outputs.front }}
        exit-code: 0
        ignore-unfixed: true

    - name: Push images
      run: |
        docker push ${{ steps.vars.outputs.front }}
        docker push ${{ steps.vars.outputs.back }}

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.13.1
        terraform_wrapper: false

    - name: Terraform init
      run: terraform -chdir=Terraform init

    - name: Import IAM roles (idempotent)
      run: |
        cd Terraform
        terraform state list | grep -q aws_iam_role.ec2_ecr_readonly || terraform import aws_iam_role.ec2_ecr_readonly ec2-ecr-readonly-role
        terraform state list | grep -q aws_iam_instance_profile.ec2_profile || terraform import aws_iam_instance_profile.ec2_profile ec2-ecr-readonly-profile

    # - name: Install SSH private key
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "$SSH_PRIV" | base64 --decode > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa

    # - name: Set pub key path for Terraform
    #   run: |
    #     echo "$SSH_PUB" > /tmp/id_rsa.pub
    #     chmod 644 /tmp/id_rsa.pub
    #     echo "PUB_PATH=/tmp/id_rsa.pub" >> $GITHUB_ENV

    - name: Terraform apply
      run: terraform -chdir=Terraform apply -auto-approve -var="ssh_pub_key_path=$PUB_PATH"

    - name: Capture EC2 IP from Terraform output
      working-directory: ./Terraform
      id: get_ip
      run: |
        EC2_IP=$(terraform output -raw ec2_public_ip)
        echo "EC2_IP=$EC2_IP" >> $GITHUB_ENV
        echo "$EC2_IP" > ../ec2_ip.txt

    - name: Wait for SSH to become available
      run: |
        EC2_IP=$(cat ec2_ip.txt)
        echo "Waiting for EC2 ($EC2_IP) SSH..."
        for i in {1..10}; do
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'echo ready' && break
          sleep 10
        done

    - name: Write Ansible inventory
      run: |
        echo "[ec2]" > ansible/inventory.ini
        echo "$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=/home/runner/.ssh/id_rsa" >> ansible/inventory.ini

    - name: Install Ansible
      run: sudo apt-get update && sudo apt-get install -y ansible

    - name: Render docker-compose.yml
      run: |
        mkdir -p ansible/files
        cat > ansible/files/docker-compose.yml <<EOF
        version: '3.8'
        services:
          frontend:
            image: ${{ steps.vars.outputs.front }}
            ports: ["80:80"]
            restart: always
          backend:
            image: ${{ steps.vars.outputs.back }}
            ports: ["3000:3000"]
            restart: always
        EOF

    - name: Deploy with Ansible
      run: |
        ANSIBLE_HOST_KEY_CHECKING=False \
        ansible-playbook -i ansible/inventory.ini ansible/deploy_app.yml \
          -e "frontend_image=${{ steps.vars.outputs.front }}" \
          -e "backend_image=${{ steps.vars.outputs.back }}"
