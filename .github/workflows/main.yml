name: build-scan-push-provision

on:
  push:
    branches: [ master ]
  workflow_dispatch:

# ─── Global defaults ──────────────────────────────────────────────────
env:
  # ECR / image-build region
  AWS_REGION: eu-west-1
  # Terraform / EC2 region (must match what you want in main.tf)
  TF_AWS_REGION: eu-central-1

jobs:
  build_and_provision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write       # needed by configure-aws-credentials OIDC

    steps:
    # ─── Pull the repo ────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ─── AWS creds for the ECR region (eu-west-1) ─────────────────────
    - name: Configure AWS credentials (eu-west-1)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # ─── Build & tag Docker images ────────────────────────────────────
    - name: Set image tags
      id: vars
      run: |
        SHA="${GITHUB_SHA::7}"
        echo "front=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/frontend:${SHA}" >> "$GITHUB_OUTPUT"
        echo "back=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/backend:${SHA}"  >> "$GITHUB_OUTPUT"

    - name: Build frontend image
      run: docker build -t ${{ steps.vars.outputs.front }} ./frontend

    - name: Build backend image
      run: docker build -t ${{ steps.vars.outputs.back }} ./backend

    # ─── Trivy scans (non-blocking) ───────────────────────────────────
    - name: Scan frontend with Trivy
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref:      ${{ steps.vars.outputs.front }}
        exit-code:      0           # never fail the build
        ignore-unfixed: true

    - name: Scan backend with Trivy
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref:      ${{ steps.vars.outputs.back }}
        exit-code:      0
        ignore-unfixed: true

    # ─── Push to ECR ──────────────────────────────────────────────────
    - name: Push images to ECR
      run: |
        docker push ${{ steps.vars.outputs.front }}
        docker push ${{ steps.vars.outputs.back }}

    # ─── Set up Terraform CLI (1.8.5) ─────────────────────────────────
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.8.5

    # ─── Terraform init/apply in infra/, using eu-central-1 ───────────
    - name: Terraform init
      run: terraform -chdir=Terraform init
      env:
        AWS_REGION:          ${{ env.TF_AWS_REGION }}
        AWS_DEFAULT_REGION:  ${{ env.TF_AWS_REGION }}

    - name: Terraform apply
      run: terraform -chdir=Terraform apply -auto-approve
      env:
        AWS_REGION:          ${{ env.TF_AWS_REGION }}
        AWS_DEFAULT_REGION:  ${{ env.TF_AWS_REGION }}

    # ─── Fetch EC2 public IP (tag Name=app-host) ──────────────────────
    - id: ec2ip
      name: Get EC2 public IP
      run: |
        IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=app-host" "Name=instance-state-name,Values=running" \
              --region ${{ env.TF_AWS_REGION }} \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)
        echo "ip=$IP" >> "$GITHUB_OUTPUT"

    # ─── Drop the SSH private key for Ansible use ─────────────────────
    - name: Write SSH private key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
