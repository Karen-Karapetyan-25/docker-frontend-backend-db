name: build-scan-push-provision

on:
  push:
    branches: [master]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  TF_AWS_REGION: eu-west-1

jobs:
  build_and_provision:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    - uses: aws-actions/amazon-ecr-login@v2

    - name: Compute image tags
      id: vars
      run: |
        SHA="${GITHUB_SHA::7}"
        echo "front=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/frontend:${SHA}" >> "$GITHUB_OUTPUT"
        echo "back=383313560305.dkr.ecr.${AWS_REGION}.amazonaws.com/backend:${SHA}"  >> "$GITHUB_OUTPUT"

    - name: Build frontend
      run: docker build -t ${{ steps.vars.outputs.front }} ./frontend

    - name: Build backend
      run: docker build -t ${{ steps.vars.outputs.back }} ./backend

    - name: Trivy scan (frontend)
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref: ${{ steps.vars.outputs.front }}
        exit-code: 0
        ignore-unfixed: true

    - name: Trivy scan (backend)
      uses: aquasecurity/trivy-action@0.19.0
      with:
        image-ref: ${{ steps.vars.outputs.back }}
        exit-code: 0
        ignore-unfixed: true

    - name: Push images
      run: |
        docker push ${{ steps.vars.outputs.front }}
        docker push ${{ steps.vars.outputs.back }}

    - uses: hashicorp/setup-terraform@v2
      with: { terraform_version: 1.8.5 }

    - name: Terraform init
      run: terraform -chdir=Terraform init

    - name: Import pre-existing IAM artefacts (idempotent)
      run: |
        cd Terraform
        terraform state list | grep -q aws_iam_role.ec2_ecr_readonly \
          || terraform import aws_iam_role.ec2_ecr_readonly ec2-ecr-readonly-role
        terraform state list | grep -q aws_iam_instance_profile.ec2_profile \
          || terraform import aws_iam_instance_profile.ec2_profile ec2-ecr-readonly-profile

    - name: Generate one-time SSH key
      run: |
        ssh-keygen -t ed25519 -f ci_key -N ""   # priv: ci_key, pub: ci_key.pub
        echo "SSH_PRIV=$(cat ci_key | base64 -w0)" >> $GITHUB_ENV
        echo "PUB_PATH=$PWD/ci_key.pub"          >> $GITHUB_ENV

    - name: Terraform apply
      run: |
        terraform -chdir=Terraform apply -auto-approve -var="ssh_pub_key_path=${{ env.PUB_PATH }}"

    - name: Debug Terraform outputs directly
      run: |
        echo "Raw ec2_public_ip output:"
        terraform -chdir=Terraform output -raw ec2_public_ip
        echo "Raw ec2_instance_id output:"
        terraform -chdir=Terraform output -raw ec2_instance_id

    - name: Fetch outputs
      id: tf_out
      working-directory: Terraform
      run: |
        IP=$(terraform -chdir=Terraform output -raw ec2_public_ip)
        ID=$(terraform -chdir=Terraform output -raw ec2_instance_id)

        if [[ -z "$IP" || -z "$ID" ]]; then
          echo "::error::terraform outputs are empty"
          exit 1
        fi
        
        echo "ip=$IP"         >> "$GITHUB_OUTPUT"
        echo "instance_id=$ID" >> "$GITHUB_OUTPUT"


    - name: Debug outputs
      run: |
        echo "IP: ${{ steps.tf_out.outputs.ip }}"
        echo "Instance ID: ${{ steps.tf_out.outputs.instance_id }}"

    - name: Setup SSH access
      run: |
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        echo "${{ env.SSH_PRIV }}" | base64 -d > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        
        # Use the IP from tf_out outputs
        IP=${{ steps.tf_out.outputs.ip }}
        echo "Using EC2 IP: $IP"
        
        # Verify IP format
        if [[ ! "$IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid IP address format: $IP"
          exit 1
        fi
        
        ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts

    - name: Write inventory
      run: |
        mkdir -p ansible
        cat > ansible/inventory.ini <<EOF
        [app_host]
        ${{ steps.tf_out.outputs.ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/ec2_key
        EOF

    # - name: Setup SSH access
    #   run: |
    #     mkdir -p ~/.ssh && chmod 700 ~/.ssh
    #     echo "${{ env.SSH_PRIV }}" | base64 -d > ~/.ssh/ec2_key || { echo "Failed to decode SSH key"; exit 1; }
    #     chmod 600 ~/.ssh/ec2_key
    #     IP=${{ steps.tf_out.outputs.ip }}
    #     echo "Target EC2 IP: $IP"
    #     ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts || { echo "Failed to add host to known_hosts"; exit 1; }

    - name: Wait for SSH
      run: |
        IP=${{ steps.tf_out.outputs.ip }}
        for i in {1..15}; do
          echo "Attempt $i/15 to connect to $IPâ€¦"
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/ec2_key \
              -o ConnectTimeout=15 \
              ubuntu@"$IP" 'echo "ready"' && exit 0
          sleep 10
        done
        echo "::error::SSH connection failed after 15 attempts"
        exit 1

    - name: Install Ansible
      run: sudo apt-get update && sudo apt-get install -y ansible

    - name: Render docker-compose.yml
      run: |
        mkdir -p ansible/files
        cat > ansible/files/docker-compose.yml <<EOF
        version: '3.8'
        services:
          frontend:
            image: ${{ steps.vars.outputs.front }}
            ports: ["80:80"]
            restart: always
          backend:
            image: ${{ steps.vars.outputs.back }}
            ports: ["3000:3000"]
            restart: always
        EOF

    - name: Deploy with Ansible
      run: |
        ANSIBLE_HOST_KEY_CHECKING=False \
        ansible-playbook -i ansible/inventory.ini ansible/deploy_app.yml \
          -e "frontend_image=${{ steps.vars.outputs.front }}" \
          -e "backend_image=${{ steps.vars.outputs.back }}"

    - name: Verify deployment
      run: |
        IP=${{ steps.tf_out.outputs.ip }}
        curl -fsS --retry 5 --retry-delay 5 http://$IP:8080
        curl -fsS --retry 5 --retry-delay 5 http://$IP
        curl -fsS --retry 5 --retry-delay 5 http://$IP:3000/api/health
